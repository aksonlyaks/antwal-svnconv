

//#include "mmc.h"
#include "cox_spi.h"
#include "cox_pio.h"
#include "STM32_USART.h"
#include <stdio.h>
#include "stm32_pio.h"
#include<stm_spi_master.h>
#include "di_msd.h"

/*----------------------------------------------------------------------*/
	/* FatFs sample project for generic microcontrollers (C)ChaN, 2010      */
	/*----------------------------------------------------------------------*/
#include "Type.h"
#include "ff.h"
#include "diskio.h"



	void die (		/* Stop with dying message */
		FRESULT rc	/* FatFs return value */
	)
	{
		printf("Failed with rc\r\n");
		for (;;) ;
	}

	/*---------------------------------------------------------*/
	/* User Provided Timer Function for FatFs module           */
	/*---------------------------------------------------------*/

	DWORD get_fattime (void)
	{
		return	  ((DWORD)(2010 - 1980) << 25)	/* Fixed to Jan. 1, 2010 */
				| ((DWORD)1 << 21)
				| ((DWORD)1 << 16)
				| ((DWORD)0 << 11)
				| ((DWORD)0 << 5)
				| ((DWORD)0 >> 1);
	}


	void delay(){
	        int i,j;

	        for(i=0;i<1000;i++)
	                for(j=0;j<100;j++);
	}

COX_SERIAL_PI *UART = &pi_serial2;
sMSD_CID *cid;
MSD_Dev *sd;							// MSD instance


	// Initializing the variables required for MSD

int main(void)
{
	COX_Status ret;
	uint32_t Size;

	COX_PIO_Dev CS = COX_PIN(2,7);			// PORTC7

	UART->Init(115200);
	printf("Start\n\r");



	sd-> cs_pin = CS;
		sd-> pio = &pi_pio;
		sd-> spi = &pi_spi1;

	sd->pio->Init(sd->cs_pin);
	sd->pio->Dir(sd->cs_pin,1);


	sd->spi->Cfg(COX_SPI_CFG_MODE,COX_SPI_MODE0,0);
	sd->spi->Cfg(COX_SPI_CFG_RATE,SPI_BaudRatePrescaler_8,0);
	sd->spi->Cfg(COX_SPI_CFG_BITS,8,0);
	sd->spi->Cfg(COX_SPI_CFG_FSB,COX_MSPI_FSB_MSB,0);
	ret = sd->spi->Init(COX_SPI_MODE0, 8);
		if(ret == COX_SUCCESS)
			printf("Spi INit done\n\r");

	//ret = initialize(sd);				// uses SDCARD.c
	ret = MSD_Init(sd);					// mmc_driver.c
	if(ret == COX_SUCCESS)
	printf("Init Succes\n\r");
	else
		printf("Init Failed\n\r");

	Size = MSD_GetChipSize(sd);
	printf("SD Card Size is=%d\n\r",Size);

//	ret = MSD_GetCIDRegister(sd, cid);
	if(ret == COX_SUCCESS)
		printf("CID Succes\n\r");
	else
	printf("CID Failed\n\r");








	/*-----------------------------------------------------------------------*/
	/* Program Main                                                          */
	/*-----------------------------------------------------------------------*/

	int main (void)
	{
		FRESULT rc;				/* Result code */
		FATFS fatfs;			/* File system object */
		FIL fil;				/* File object */
		DIR dir;				/* Directory object */
		FILINFO fno;			/* File information object */
		UINT bw, br, i;
		BYTE buff[128];

		SYS_TargetResetInit();

		InitUart1();

		//gpioInit();			/*add the configuration for gpio*/


		f_mount(0, &fatfs);		/* Register volume work area (never fails) */

		rprintfStr("\r\nOpen a test file (hola.txt).\r\n");

		rc = f_open(&fil, "hola.txt", FA_READ);
		if (rc) die(rc);

		rprintfStr("\r\nType the file content.\r\n");
		for (;;) {
			rc = f_read(&fil, buff, sizeof(buff), &br);	/* Read a chunk of file */
			if (rc || !br) break;			/* Error or end of file */
			for (i = 0; i < br; i++)		/* Type the data */
				putchar_uart1(buff[i]);
		}
		if (rc) die(rc);

		rprintfStr("\r\nClose the file.\r\n");
		rc = f_close(&fil);
		if (rc) die(rc);

		rprintfStr("\r\nCreate a new file (hello.txt).\r\n");
		rc = f_open(&fil, "hello.txt", FA_WRITE | FA_CREATE_ALWAYS);
		if (rc) die(rc);

		rprintfStr("\r\nWrite a text data. (Hello world!)\r\n");
		rc = f_write(&fil, "Hello world!\r\n", 14, &bw);
		if (rc) die(rc);
		//rprintfStr("%u bytes written.\r\n", bw);
	 	rprintfStr("bytes written.\r\n");
		rprintfStr("\r\nClose the file.\r\n");
		rc = f_close(&fil);
		if (rc) die(rc);

		rprintfStr("\r\nOpen root directory.\r\n");
		rc = f_opendir(&dir, "");
		if (rc) die(rc);

		rprintfStr("\r\nDirectory listing...\r\n");
		for (;;) {
			rc = f_readdir(&dir, &fno);		/* Read a directory item */
			if (rc || !fno.fname[0]) break;	/* Error or end of dir */
			if (fno.fattrib & AM_DIR)
				rprintfStr("   <dir>  \r\n");

			else
				rprintfStr("   <dir>  \r\n");
				//rprintf("%u  %s\r\n", fno.fsize, fno.fname);
		}
		if (rc) die(rc);

		rprintfStr("\r\nTest completed.\r\n");
		for (;;) ;
	}





	//printf("Manf=0%x, Prod Name=%s",cid->ManufacturerID,(char *)cid->ProdName1);
    while(1)
    {
    }
}
