/*****************************************************************************************************
 *			 FUNTION THAT READS THE DATA ARRIVED AT THE PORT			     *
 *****************************************************************************************************/


#include "WSNPacket.h"
#define MAX_BUFF_SIZE 64
/*
 * Structures
 */
typedef struct Message {
	INT8U DataBuffer[MAX_BUFF_SIZE];
}MSG;


// Message to be added on to queue , taken two buffer packet //
MSG DataMsg[2];

//This function is called by task one so that it can packetize the data from 0x7E - 0x7E
/*
void Read_Data(uint8_t ch){
	static buf = 0;
    static uint8_t PktStartRecd = 0;
    static int32_t i = 0, j, res;//, Status;


	if (PktStartRecd) {
		if ((i == 1) && (ch == START_BYTE)) {
			return ;
		}
		// Reading data from the Port
		DataMsg[buf].DataBuffer[i++] = ch;
		if (ch == STOP_BYTE) {
			printf("\nData Recd is: ");
			for (j=0; j < i; j++){
				printf("\t%x ",DataMsg[buf].DataBuffer[j]);
			}
			printf("\n");
			//put the data in the queue , change according to MSG QUEUE IN COOCOX
			WSNDecoderQueueId = Get_WSN_Decoder_Queue_Id();
			Write_Queue(WSNDecoderQueueId, &DataMsg[buf]);
			PktStartRecd = 0;
			i = 0;
			buf ^= 0x1 ;  //change the buffer to be used
			printf("+++++++++++++++++\n");
		}
		else {
			if (ch == START_BYTE) {
				PktStartRecd = 1;
				DataMsg[buf].DataBuffer[i++] = START_BYTE;
			} else { printf("%c", ch); }
		}



	}
}


//This is called by task 2 to eat the MsgQ of created by read interface
//void wsnPacketDecoding(void ){

	//Get the MSG from the Queue






}


/*
 * The function is called by the WSN Decoder Engine to parse
 * the raw Data packet received from the MIB(Mote Interafce Board)510/600.
 * The Code parses ( 0x7D followed by 0x5D to 0x7D ) & ( 0x7D followed by 0x5E to 0x7E )
 */
/*
void ParsePkt(uint8_t *Packet)
{
	int32_t i=1, j=1;

	for(; Packet[i] != STOP_BYTE; ) {
    	if (Packet[i] == ESC_CHAR) {
			Packet[j++] = Packet[++i] ^ 0X20;
			i++;
    	} else {
	    	Packet[j++] = Packet[i++];
		}
	}

}





